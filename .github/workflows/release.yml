name: Release Client

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
    paths:
      - '.github/workflows/release.yml'
      - 'crates/wazuh-cert-oauth2-client/**'
      - 'crates/wazuh-cert-oauth2-model/**'
      - 'Cargo.toml'

jobs:
  build-linux:
    name: Build CLI (Linux)
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm64
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends pkg-config libssl-dev

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build with cargo
        env:
          OPENSSL_NO_VENDOR: "1"
        run: cargo build -p wazuh-cert-oauth2-client --profile prod --target ${{ matrix.target }}

      - name: Rename resource
        run: mv target/${{ matrix.target }}/prod/wazuh-cert-oauth2-client wazuh-cert-oauth2-client-${{ matrix.target }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wazuh-cert-oauth2-client-${{ matrix.target }}
          path: wazuh-cert-oauth2-client-${{ matrix.target }}

  build-macos:
    name: Build CLI for macOS
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            runner: macos-13
            brew_prefix: /usr/local/opt/openssl@3
          - target: aarch64-apple-darwin
            runner: macos-14
            brew_prefix: /opt/homebrew/opt/openssl@3
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-

      - name: Install OpenSSL and pkg-config
        run: |
          brew update
          brew install pkg-config openssl@3

      - name: Install macOS target
        run: rustup target add ${{ matrix.target }}

      - name: Build with cargo
        env:
          PKG_CONFIG_PATH: ${{ matrix.brew_prefix }}/lib/pkgconfig
          OPENSSL_NO_VENDOR: "1"
        run: cargo build -p wazuh-cert-oauth2-client --profile prod --target ${{ matrix.target }}

      - name: Rename resource
        run: mv target/${{ matrix.target }}/prod/wazuh-cert-oauth2-client wazuh-cert-oauth2-client-${{ matrix.target }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wazuh-cert-oauth2-client-${{ matrix.target }}
          path: wazuh-cert-oauth2-client-${{ matrix.target }}

  build-windows:
    name: Build CLI for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-

      - name: Install OpenSSL via vcpkg
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg $env:USERPROFILE\vcpkg
          & $env:USERPROFILE\vcpkg\bootstrap-vcpkg.bat
          $triplet = "x64-windows"
          if ("${{ matrix.target }}" -eq "aarch64-pc-windows-msvc") { $triplet = "arm64-windows" }
          & $env:USERPROFILE\vcpkg\vcpkg.exe install openssl:$triplet
          echo "VCPKG_ROOT=$env:USERPROFILE\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKGRS_TRIPLET=$triplet" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Windows target
        run: rustup target add ${{ matrix.target }}

      - name: Build with cargo
        run: cargo build -p wazuh-cert-oauth2-client --profile prod --target ${{ matrix.target }}

      - name: Rename resource
        run: mv target/${{ matrix.target }}/prod/wazuh-cert-oauth2-client.exe wazuh-cert-oauth2-client-${{ matrix.target }}.exe

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wazuh-cert-oauth2-client-${{ matrix.target }}
          path: wazuh-cert-oauth2-client-${{ matrix.target }}.exe

  release:
    name: Release
    permissions: write-all
    needs:
      - build-linux
      - build-macos
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: '**'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
